<template>
  <div class="page">
    <div class="formContainer">
      <el-form ref="queryform" :model="form" label-width="100px">
        <el-form-item label="分组名称">
          <el-select v-model="form.groupName" placeholder="请选择">
                <el-option v-for="item in machinesGroup" :key="item.group_name" :label="item.group_name" :value="item.group_name"></el-option>
          </el-select>
        </el-form-item>

        <el-form-item label="状态">
            <el-select v-model="form.status" placeholder="请选择">
                <el-option v-for="item in statusInfo" :key="item.code" :label="item.name" :value="item.code"></el-option>
            </el-select>
        </el-form-item>
        <ul class="formBtn">
          <el-button type="primary" @click="submit">查询<i class="el-icon-search el-icon--right"></i></el-button>
          <el-button type="primary" @click="resetForm('queryform')">重置<i class="el-icon-refresh-left el-icon--right"></i></el-button>
        </ul>
      </el-form>
    </div>
    <div class="tableToolContainer clearfix">
        <div class="btnGroup-base">
            <el-button type="success" icon="el-icon-plus" circle @click="addItem"></el-button>
            <el-button type="primary" icon="el-icon-edit" circle @click="btnEdit" :disabled="disabled"></el-button>
        </div>
        <div class="btnGroup-other">
          <el-button type="primary" round @click="setGroup" :disabled="disabled">选择服务器</el-button>
        </div>
    </div>
    <div class="tableContainer">
      <el-table
        :data="tableDatas"
        style="width: 100%"
        :border="false"
        :height="fullHeight-300"
        :cell-class-name="nocheckbox"
        row-key="id"
         lazy
        :load="load"
        @selection-change="handleSelectionChange"
        :tree-props="{children: 'children', hasChildren: 'hasChildren'}"
        >
        <el-table-column
          type="selection"
          width="55">
        </el-table-column>
        <el-table-column
          fixed
          type="index"
          :index="indexMethod"
          label="序号"
          width="90"
        >
        </el-table-column>
        <el-table-column
          prop="groupCode"
          label="服务器分组编码"
          width="180">
        </el-table-column>
        <el-table-column
          prop="groupName"
          label="服务器分组名称"
          width="180">
        </el-table-column>
        <el-table-column
          prop="deployRootPath"
          label="服务器部署根目录"
          width="180">
        </el-table-column>
        <el-table-column
          prop="status"
          label="状态" 
          width="100">
        </el-table-column>
        <el-table-column
          prop="remark"
          label="规划说明">
        </el-table-column>
      </el-table>
      <el-pagination
        @size-change="handleSizeChange"
        @current-change="handleCurrentChange"
        :current-page="currentPage"
        :page-sizes="[10, 20, 30, 40]"
        :page-size="10"
        layout="total,sizes, prev, pager, next, jumper"
        :total="total">
      </el-pagination>
    </div>
    <Dialog></Dialog>
    <SetGroup></SetGroup>
  </div>
</template>
<script>
import {mapGetters,mapState,mapActions} from 'vuex'
import Dialog from './dialog/machineGroupDialog'
import SetGroup from './dialog/setGroup'
export default {
    name:"Table1",
    components:{
        Dialog,
        SetGroup
    },
    data:function(){
        return{
          //顶部查询条件表单
            form:{
              groupName:'',
              status:''
            }, 
            //表格     
            tableDatas:[],     
            //状态 
            statusInfo:[{code:'',name:''}],
            //分组
            childrenGroup:[],
            //选中的行
            mutiplelines:[],
            //编辑按钮、选择服务器按钮是否可用
            disabled:true,
            total:0,
            //服务器分组
            machinesGroup:[]
            

        }
    },
    beforeRouteEnter:(to,from,next)=>{
		next(vm=>{
        vm.mainContainerEl.setAttribute("class", "mainContainer animate__animated animate__fadeInLeft");
		});
    },
    beforeRouteLeave:function(to,from,next){
        this.mainContainerEl.setAttribute("class", "mainContainer");
        next();
    },
    mounted:function(){
        this.$store.dispatch('getfullHeight');
        this.queryPageList(JSON.stringify({}));
        this.queryStatus();
        this.queryMachinesGroup();
    },
    //监听选择的行，控制按钮是否可用
    watch:{
      mutiplelines:function(val){
        if(val&&val.length==1){
          this.disabled=false
        }
        else if(val&&val.length>1){
          this.disabled=true
        }
        else if(val.length==0){
          this.disabled=true
        }
      }
    },
    computed:{
        ...mapGetters(['fullHeight','mainContainerEl']),
        ...mapGetters('resourManage',['currentPage','pageSize']),
    },
    methods: {
      //动态控制checkbox显示与隐藏
      nocheckbox(row){
        if(!row.row.hasChildren){
          return "nocheckbox"
        }
      },
      //查询服务器分组
      queryMachinesGroup:function(){
        this.$axios.get(process.env.API_HOST+'/machinesGroup/name')
        .then((res)=>{
          this.machinesGroup=res.data.data.name;
        })
      },
      //查询所有已存在的状态
      queryStatus:function(){
        this.$axios.get(process.env.API_HOST+'/machinesGroup/dropdown')
        .then((res)=>{
          this.statusInfo=[];
          let resData=res.data.data.status,that=this;
          resData.find((val,index,arr)=>{
            let cellObj={};
            cellObj.code=val.code;
            cellObj.name=val.name;
            cellObj.roomAddress=val.roomAddress
            that.statusInfo.push(cellObj);
          })
        })
      },
      //序列
      indexMethod(index) {
        return index+1;
      },
      //size
      handleSizeChange(val) {
        this.$store.commit('resourManage/setPageSize',val);
        this.tableDatas=[];
        let that=this;
        this.queryPageList(JSON.stringify(that.form));
      },
      //page
      handleCurrentChange(val) {
        this.$store.commit('resourManage/setCurrentPage',val);
        this.tableDatas=[];
        let that=this;
        this.queryPageList(JSON.stringify(that.form));
      },
      //复选框
      handleSelectionChange:function(val){
        this.mutiplelines=val;
      },
      //编辑按钮
      btnEdit:function(){
        this.$store.commit('resourManage/setLineData',this.mutiplelines[0]);
        this.$store.commit('resourManage/setDialogFormVisible',true);
        this.$store.commit('resourManage/setTitle','服务器分组编辑');
        this.$store.commit('resourManage/setDialogStatus','edit');
      },
      //设置分组
      setGroup:function(){
        this.$store.commit('resourManage/setMachineGroupVisible',true);
        this.$store.commit('resourManage/setLineData',this.mutiplelines[0]);
      },
      //添加
      addItem(){
        this.$store.commit('resourManage/setLineData',{});
        this.$store.commit('resourManage/setDialogFormVisible',true);
        this.$store.commit('resourManage/setTitle','服务器分组设置');
        this.$store.commit('resourManage/setDialogStatus','add');
      },
      submit:function(){
        let that=this;
        this.tableDatas=[];
        this.queryPageList(JSON.stringify(that.form));
      },
      resetForm() {
        let obj=this.form;
        let that=this;
        Object.keys(obj).forEach((key)=>{
          obj[key]='';
        });
        this.tableDatas=[];
        this.queryPageList(JSON.stringify(that.form));
      },

      queryPageList:function(appInfo){
         this.$axios.post(process.env.API_HOST+`/machinesGroup/selectPageList?pageNum=${this.currentPage}&pageSize=${this.pageSize}`,appInfo).then((res)=>{
            let that=this;
            let resData=res.data.data.list;
          if(resData){
            that.total=res.data.data.total;
            resData.find((value,index,arr)=>{
              let cellObj={}
              cellObj.id=value.id;
              cellObj.groupCode=value.groupCode;
              cellObj.groupName=value.groupName;
              cellObj.deployRootPath=value.deployRootPath;
              cellObj.startScript=value.startScript;
              cellObj.rootPath=value.rootPath;
              cellObj.status=value.status;
              cellObj.remark=value.remark;
              if(value.machinesInfos){
                cellObj.hasChildren=true;
                cellObj.machinesInfos=value.machinesInfos
              }
              that.tableDatas.push(cellObj);
            })
          }
           
        }).catch((err)=>{
            this.$message({
              showClose: false,
              type: "error",
              center: "center",
              message: "列表查询失败，请刷新重试！",
              offset: this.fullHeight / 2
            })
        })
      },
      refreshPageList:function(){
         this.$axios.post(process.env.API_HOST+`/machinesGroup/selectPageList?pageNum=${this.currentPage}&pageSize=${this.pageSize}`,JSON.stringify({})).then((res)=>{
            let that=this;
            let resData=res.data.data.list;
          if(resData){
            that.tableDatas=[];
            that.total=res.data.data.total;
            resData.find((value,index,arr)=>{
                let cellObj={}
                cellObj.id=value.id;
                cellObj.groupCode=value.groupCode;
                cellObj.groupName=value.groupName;
                cellObj.deployRootPath=value.deployRootPath;
                cellObj.startScript=value.startScript;
                cellObj.rootPath=value.rootPath;
                cellObj.status=value.status;
                cellObj.remark=value.remark;
                if(value.machinesInfos){
                  cellObj.hasChildren=true;
                  cellObj.machinesInfos=value.machinesInfos
                }
                that.tableDatas.push(cellObj);
            });
            this.$message({
              showClose: false,
              type: "success",
              center: "center",
              message: "恭喜，列表刷新成功！",
              offset: this.fullHeight / 2
            })
          }
           
        }).catch((err)=>{
            this.$message({
              showClose: false,
              type: "error",
              center: "center",
              message: "列表查询失败，请刷新重试！",
              offset: this.fullHeight / 2
            })
        })
      },
     
      load(tree, treeNode, resolve) {
        let that=this,headObj={id:`1314_1314${tree.id}`,groupCode:"服务器编码",groupName:"服务器名称",deployRootPath:"服务器IP",status:"服务器状态",remark:"服务器部署目录"};
        that.childrenGroup=[];
        tree.machinesInfos.find((value,index,arr)=>{
          let Obj={};
          Obj.id=tree.id+"_"+value.id;
          Obj.groupCode=value.machineCode;
          Obj.groupName=value.machineName;
          Obj.deployRootPath=value.machineDomain;
          Obj.status=value.status;
          Obj.remark=value.deployRoot;
          that.childrenGroup.push(Obj);
        })
        that.childrenGroup.unshift(headObj);
        return  resolve(that.childrenGroup);
      }
    }
}
</script>