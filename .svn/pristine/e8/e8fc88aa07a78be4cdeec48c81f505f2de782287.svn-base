<template>
	<div>
		<el-dialog 
		:title="title" 
		:show-close=false
		width="880px"
		:visible="dialogFormVisible"
		:close-on-click-modal=false
		:append-to-body=true	
		>
		  <el-form :model="lineData" class="clearfix" label-width="140px" :rules="rules" ref="ruleForm">
		  	<div class="formBlock">
			    <el-form-item label="服务器分组编码" prop="groupCode">
			      <el-input v-model="lineData.groupCode" autocomplete="off" placeholder="请输入服务器分组编码" :disabled='disabled'></el-input>
			    </el-form-item>
			    <el-form-item label="服务器分组名称" prop="groupName">
			       <el-input v-model="lineData.groupName" autocomplete="off" placeholder="请输入服务器分组名称"></el-input>
			    </el-form-item>
				<el-form-item label="服务器部署根目录" prop="deployRootPath">
				  <el-input v-model="lineData.deployRootPath" autocomplete="off" placeholder="请输入服务器部署根目录"></el-input>
				</el-form-item>
			    <el-form-item label="启动脚本目录" prop="startScript">
			      <el-input v-model="lineData.startScript" autocomplete="off" placeholder="请输入启动脚本目录" ></el-input>
			    </el-form-item>

				<el-form-item label="部署根目录" prop="rootPath">
			      <el-input v-model="lineData.rootPath" autocomplete="off"  placeholder="请输入部署根目录"></el-input>
				</el-form-item>
			   
				<el-form-item label="状态">
					<el-select v-model="lineData.status" placeholder="请选择">
						<el-option v-for="item in statusInfo" :key="item.code" :label="item.name" :value="item.code"></el-option>
					</el-select>
				</el-form-item>

				<el-form-item label="规划说明或备注" class="remark" prop="remark">
				  <el-input type="textarea" v-model="lineData.remark" placeholder="请输入规划说明或备注"></el-input>
			    </el-form-item>
		    </div>

		  </el-form>
		  <div slot="footer" class="dialog-footer">
		    <el-button @click="cancel">取消</el-button>
		    <el-button type="primary" @click="submit('ruleForm')" >提交</el-button>
		  </div>
		</el-dialog>
	</div>
</template>
<script>
import {mapGetters,mapState,mapActions} from 'vuex'
export default{
	name:'Dialog',
	data:function(){
		var validaGroupCode = (rule, value, callback) => {
			if (!value) {
				return callback(new Error('不能为空'));
			}
			else{
				callback();
			}

		};
		var validaGroupName = (rule, value, callback) => {
			if (!value) {
				return callback(new Error('不能为空'));
			}
			else{
				callback();
			}

		};
		var validaDeployRootPath = (rule, value, callback) => {
			if (!value) {
				return callback(new Error('不能为空'));
			}
			else{
				callback();
			}
		};
		var validaRootPath = (rule, value, callback) => {
			if (!value) {
				return callback(new Error('不能为空'));
			}
			else{
				callback();
			}
		};
		var validaStartScript = (rule, value, callback) => {
			if (!value) {
				return callback(new Error('不能为空'));
			}
			else{
				callback();
			}
		};
		var validaRemark = (rule, value, callback) => {
			if (!value) {
				return callback(new Error('不能为空'));
			}
			else{
				callback();
			}
		};

		return{
			formLabelWidth: '120px',
			//状态
			statusInfo:[{code:null,name:null}],
			//服务器编码是否可用
			disabled:false,
			rules: {
				groupCode: [
					{ validator: validaGroupCode, trigger: 'blur'}
				],
				groupName: [
					{ validator: validaGroupName, trigger: 'blur'}
				],
				deployRootPath: [
					{ validator: validaDeployRootPath, trigger: 'blur'}
				],
				startScript: [
					{ validator: validaStartScript, trigger: 'blur'}
				],
				rootPath: [
					{ validator: validaRootPath, trigger: 'blur'}
				],
				remark: [
					{ validator: validaRemark, trigger: 'blur'}
				]
			}
		}
	},
	computed:{
		...mapGetters(['fullHeight']),
		...mapGetters('resourManage',['dialogFormVisible','dialogStatus','currentPage','pageSize','title','lineData']),
	},
	mounted:function(){
		this.queryStatus();
	},
	watch:{
		dialogStatus:function(val){
			if(val=="edit"){
				this.disabled=true;
			}
			else if(val=="edit"){
				this.disabled=false;
			}
		}
	},
	methods:{
		//查询状态
		queryStatus:function(){
			this.$axios.get(process.env.API_HOST+'/machinesGroup/dropdown')
			.then((res)=>{
			this.statusInfo=[];
			let resData=res.data.data.status,that=this;
			resData.find((val,index,arr)=>{
				let cellObj={};
				cellObj.code=val.code;
				cellObj.name=val.name;
				that.statusInfo.push(cellObj);
			})
			})
		},
		submit:function(a){
			//添加提交
			let that=this;
			if(this.dialogStatus=='add'){
				that.$refs[a].validate((valid) => {
					if(valid){
						let that=this;
						this.$axios({
							url:process.env.API_HOST+`/machinesGroup/add`,
							method:'post',
							data:JSON.stringify(that.lineData),
						})
						.then((res)=>{
							this.$store.commit('resourManage/setDialogFormVisible',false);
							this.$store.commit('resourManage/setLineData',{});
							this.$message({
								showClose:false,
								type:'success',
								message:'恭喜，添加成功！',
								center:'center',
								offset:this.fullHeight/2,
							})
						})
						.catch((err)=>{
							this.$message({
								showClose:false,
								type:'error',
								message:'抱歉，添加失败，请重试！',
								center:'center',
								offset:this.fullHeight/2,
							})
						})
					}
					else{
						this.$message({
							showClose:false,
							type:'error',
							message:'表单填写不合法！',
							center:'center',
							offset:this.fullHeight/2,
						})
					}
				})
				
			}
			//编辑提交
			else if(this.dialogStatus=='edit'){
				that.$refs[a].validate((valid) => {
					if(valid){
						this.$axios({
						url:process.env.API_HOST+`/machinesGroup/update`,
						method:'post',
						data:JSON.stringify(that.lineData),
						})
						.then((res)=>{
							this.$store.commit('resourManage/setDialogFormVisible',false);
							this.$store.commit('resourManage/setLineData',{});
							this.$message({
								showClose:false,
								type:'success',
								message:'恭喜，修改成功！',
								center:'center',
								offset:this.fullHeight/2,
							})

						})
						.catch((err)=>{
							this.$message({
								showClose:false,
								type:'error',
								message:'抱歉，修改失败，请重试！',
								center:'center',
								offset:this.fullHeight/2,
							})
						})
					}
					else{
						this.$message({
							showClose:false,
							type:'error',
							message:'表单填写不合法！',
							center:'center',
							offset:this.fullHeight/2,
						})
					}
					
				})
				
			}
		},
		cancel:function(){
			this.$store.commit('resourManage/setDialogFormVisible',false);
			this.$store.commit('resourManage/setLineData',{});
			this.$message({
				showClose:false,
				type:'success',
				message:'已取消编辑',
				center:'center',
				offset:this.fullHeight/2,
			})
		},
		
	}
}
</script>